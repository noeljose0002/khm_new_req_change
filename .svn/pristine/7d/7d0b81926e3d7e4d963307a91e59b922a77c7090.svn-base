<?php

namespace App\Models;

use CodeIgniter\Model;

class PurchaseReportModel extends Model
{
    protected $table         = 'khm_obj_enquiry_header';
    protected $primaryKey    = 'enquiry_header_id';
    protected $returnType    = 'array';

    // Removed the stray comma inside the string.
    protected $allowedFields = [
        'object_id',
        'guest_entity_id',
        'agent_entity_id',
        'employee_entity_id',
        'enq_added_date',
        'enq_type_id',
        'enterprise_id',  
    ];

    /**
     * Builds the “inner” SQL that computes total_value & extra_cost, wraps it
     * as a derived table, and joins to khm_obj_tax_rate to pull in tax_rate_percent.
     *
     * RETURNS a Query Builder instance (not an array).
     */
    protected function baseQuery()
    {
        // 1) Build the inner query exactly as before, but only compile it instead of executing.
        $innerBuilder = $this->db
            ->table('khm_obj_enquiry_header AS h')
            ->distinct()
            ->select([
                // header fields
                'h.ref_no',
                'h.enquiry_header_id',
                'h.object_id',
                'h.guest_entity_id',
                'h.agent_entity_id',
                'h.employee_entity_id',
                'h.enq_added_date',
                'h.enq_type_id',
                'h.is_active AS header_active',

                // object master
                'om.object_name',

                // guest / agent / employee names
                'ge.entity_name AS guest_name',
                'ae.entity_name AS agent_name',
                'ee.entity_name AS employee_name',

                // details fields
                'd.no_of_night',
                'd.enquiry_details_id',
                'd.date_of_tour_start',
                'd.total_no_of_pax',
                'd.is_active AS details_active',

                // tour‐details fields
                't.check_in_date',
                't.check_out_date',
                't.is_active AS tour_active',
                'lmg.geog_name',

                // extension fields
                'e.is_active AS extension_active',
                'e.tpc',

                // derived hotel object name 
                'hkom.object_name AS hotel_name',

                // agent gstn no and state
                'attriagent.entity_attr_value AS agent_gstn',
                'attr.entity_attr_value      AS agent_state',

                // transporter name
                'em4.entity_name AS transporter_name',
            ])
            // transport follow‐up → transporter
            ->join(
                'khm_obj_transport_follow_up AS tf',
                'tf.enquiry_header_id = h.enquiry_header_id',
                'left'
            )
            ->join(
                'khm_entity_mst AS em4',
                'em4.entity_id = tf.transporter_id',
                'left'
            )

            // join header → details
            ->join(
                'khm_obj_enquiry_details AS d',
                'd.enquiry_header_id = h.enquiry_header_id',
                'left'
            )
            // join header + details → tour details
            ->join(
                'khm_obj_enquiry_tour_details AS t',
                't.enquiry_header_id = h.enquiry_header_id
                 AND t.enquiry_details_id = d.enquiry_details_id',
                'left'
            )
            // join tour → itinerary details
            ->join(
                'khm_obj_enquiry_itinerary_details AS koei',
                'koei.tour_details_id = t.tour_details_id',
                'left'
            )
            // join itinerary → hotel → object master (hotel)
            ->join(
                'khm_obj_hotel AS koh',
                'koh.hotel_id = koei.hotel_id',
                'left'
            )
            ->join(
                'khm_obj_mst AS hkom',
                'hkom.object_id = koh.object_id',
                'left'
            )
            ->join(
                'khm_loc_mst_geography AS lmg',
                'lmg.geog_id = hkom.object_location_id',
                'left'
            )

            // join header + details → detail extensions
            ->join(
                'khm_obj_enquiry_detail_extensions AS e',
                'e.enquiry_header_id = h.enquiry_header_id
                 AND e.enquiry_details_id = d.enquiry_details_id',
                'left'
            )
            // join object master for enquiry’s object_name
            ->join(
                'khm_obj_mst AS om',
                'om.object_id = h.object_id',
                'left'
            )
            // guest entity
            ->join(
                'khm_entity_mst AS ge',
                'ge.entity_id = h.guest_entity_id',
                'left'
            )
            // agent entity
            ->join(
                'khm_entity_mst AS ae',
                'ae.entity_id = h.agent_entity_id',
                'left'
            )
            // employee entity
            ->join(
                'khm_entity_mst AS ee',
                'ee.entity_id = h.employee_entity_id',
                'left'
            )
            // join entity attributes to get agent_state / agent_gstn
            ->join(
                'khm_entity_attribute AS attr',
                'attr.entity_id = h.agent_entity_id
                 AND attr.entity_class_attr_id = 1978',
                'left'
            )
            ->join(
                'khm_entity_attribute AS attriagent',
                'attriagent.entity_id = h.agent_entity_id
                 AND attriagent.entity_class_attr_id = 1970',
                'left'
            )
            // join hotel object master to resolve hotel_id if needed
            ->join(
                'khm_obj_mst AS hm',
                'hm.object_id = attr.entity_attr_value',
                'left'
            )
            // join itinerary → costing details
            ->join(
                'khm_obj_itinerary_costing_details AS icd',
                'icd.itinerary_details_id = koei.itinerary_details_id',
                'left'
            )

            // aggregated total_value
            ->select("
                COALESCE(
                  SUM(
                    CASE
                      WHEN icd.cost_component_id = 6 
                       AND icd.room_type_id = 2 
                        THEN icd.tariff * COALESCE(koei.double_room, 0)
                      WHEN icd.cost_component_id = 6
                       AND icd.room_type_id = 1
                        THEN icd.tariff * COALESCE(koei.single_room, 0)
                      WHEN icd.cost_component_id = 9
                       AND icd.room_type_id = 2
                        THEN icd.tariff * COALESCE(koei.extra_bed, 0)
                      WHEN icd.cost_component_id = 12
                       AND icd.room_type_id = 2
                        THEN icd.tariff * COALESCE(koei.child_with_bed, 0)
                      WHEN icd.cost_component_id = 15
                       AND icd.room_type_id = 2
                        THEN icd.tariff * COALESCE(koei.child_without_bed, 0)
                      ELSE 0
                    END
                  ),
                  0
                ) AS total_value
            ", FALSE)

            // aggregated extra_cost
            ->select("
                COALESCE(
                  SUM(
                    CASE
                      WHEN icd.cost_component_id = 19
                       AND icd.room_type_id = 1
                        THEN icd.tariff
                      ELSE 0
                    END
                  ),
                  0
                ) AS extra_cost
            ", FALSE)

            // only “active” rows
            ->where('h.is_active',    1)
            ->where('d.is_active',    1)
            ->where('t.is_active',    1)
            ->where('koei.is_active', 1)
            ->where('icd.is_active',  1)
            ->where('e.is_active',    1)

            // group and sort
            ->groupBy('t.tour_details_id')
            ->orderBy('d.date_of_tour_start', 'DESC');

        // Compile the inner query into a SQL string (without executing).
        $innerSql = $innerBuilder->getCompiledSelect();

        // 2) Use that compiled SQL as a derived table. In CI4, we get a new Builder via table("(...) AS base", FALSE).
        $outerBuilder = $this->db
            ->table("($innerSql) AS base", FALSE)
            ->select('base.*')
            ->select('COALESCE(tr.tax_rate_percent, 0) AS tax_rate_percent', FALSE)
            ->join(
                'khm_obj_tax_rate AS tr',
                "
                  tr.object_id = base.object_id
                  AND base.total_value BETWEEN tr.applicable_hotel_range_from AND tr.applicable_hotel_range_to
                  AND tr.deleted = 0
                ",
                'left',
                FALSE
            );

        // RETURN the builder so we can chain additional WHERE/ORDER BY later if needed
        return $outerBuilder;
    }

    /**
     * Filters the base query by date range (either check_in_date or check_out_date),
     * and optionally by enq_type_id ($system).
     *
     * @param string $fromYmd  — “YYYY-MM-DD” (inclusive)
     * @param string $toYmd    — “YYYY-MM-DD” (exclusive)
     * @param int    $checkRaw — 1 → filter on t.check_in_date; 0 → filter on t.check_out_date
     * @param int    $system   — if nonzero, also WHERE h.enq_type_id = $system
     *
     * @return array  — result set as an array of rows
     */
    public function getByDateRange(string $fromYmd, string $toYmd, int $checkRaw, int $system): array
    {
        // 1) Decide which date‐column to use for filtering
        $column = $checkRaw === 1
            ? 't.check_in_date'
            : 't.check_out_date';

        // 2) Start from your baseQuery() builder
        $qb = $this->baseQuery();

        // 3) If $system is truthy (nonzero), add that WHERE clause on enq_type_id
        if ($system) {
            $qb->where('h.enq_type_id', $system);
        }

        // 4) Add the date‐range filters
        $qb->where("$column >=", $fromYmd)
           ->where("$column <",  $toYmd);

        // 5) Execute and return results as an array
        return $qb
            ->get()
            ->getResultArray();
    }

    /**
     * Returns everything from baseQuery (no additional filter).
     */
    public function getSourceReport(): array
    {
        return $this->baseQuery()
            ->get()
            ->getResultArray();
    }
}

