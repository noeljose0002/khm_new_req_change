<?php
namespace App\Controllers;

use CodeIgniter\Controller;
use App\Models\SuperAdminCostComponentTypeModel;
use App\Models\Dashboard_m;
use CodeIgniter\HTTP\ResponseInterface;

class SuperAdminCostComponentType extends Controller
{
    protected $costComponentTypeModel;
    protected $dashboardModel;

    public function __construct()
    {
        $this->costComponentTypeModel= new SuperAdminCostComponentTypeModel();
        $this->dashboardModel= new Dashboard_m();
    }

    
    public function index()
    {
        $entityId   = session('user_id');
        $activeRole = session('active_role');

        // Fetch entity roles & systems
        $allRoles  = $this->dashboardModel->get_all_entity_roles($entityId);
        $allSys    = $this->dashboardModel->get_all_systems($entityId);

        // Prepare data for the sidebar/menu
        $data = [
            'all_systems'       => $allSys,
            'all_roles_assn'    => $allRoles ?: [],
            'all_menus'         => $allRoles ? $this->dashboardModel->get_all_role_menus($activeRole) : [],
            'all_permissions'   => $allRoles ? $this->dashboardModel->get_all_entity_permissions($activeRole, 3) : [],
            'parent_menu'       => $this->dashboardModel->get_parent_menus(),
            'sub_menu'          => $this->dashboardModel->get_sub_menus(),
        ];

        return view('masters/super_admin_cost_component_type', $data);
    }

    public function list():ResponseInterface
    {
        $result= $this->costComponentTypeModel->getAll();
        return $this->response->setJSON(['data'=>$result]);

    }

    public function create():ResponseInterface
    {
        $rules = [
            'cost_component_type_id'=>'required|integer',
            'cost_component_type_name'=>'required|Max_length[100]',
            'enterprise_id' => 'required|integer',
        ];

        if(! $this->validate($rules)){
            return $this->response->setStatusCode(422)
                ->setJSON(['error'=>$this->validator->getErrors()]);
        }

        $payload=[
            'cost_component_type_id'=> $this->request->getPost('cost_component_type_id'),
            'cost_component_type_name'=> $this->request->getPost('cost_component_type_name'),
            'enterprise_id'=> $this->request->getPost('enterprise_id'),
        ];

        $this->costComponentTypeModel->insert($payload);

        return $this->response->setJSON(['message'=>'created successfully']);
    } 


    public function edit(int $id):ResponseInterface
    {
        $result= $this->costComponentTypeModel->getOne($id);
        if(! $result){
            return $this->response->setStatusCode(404)
            ->setJSON(['error'=>'Record not found']);
        }
        return $this->response->setJSON($result);
    }

    
    public function update($id):ResponseInterface
    {
        $rules = [
            'cost_component_type_id'=>'required|integer',
            'cost_component_type_name'=>'required|Max_length[100]',
            'enterprise_id' => 'required|integer',
        ];

        if(! $this->validate($rules)){
            return $this->response->setStatusCode(422)
                ->setJSON(['error'=>$this->validator->getErrors()]);
        }

        $payload=[
            'cost_component_type_id'=> $this->request->getPost('cost_component_type_id'),
            'cost_component_type_name'=> $this->request->getPost('cost_component_type_name'),
            'enterprise_id'=> $this->request->getPost('enterprise_id'),
        ];

       $updated= $this->costComponentTypeModel->update($id,$payload);
       if ($updated===false){
        return $this->response->setStatusCode(500)
        ->setJSON(['error'=>'updated failed']);
       }

        return $this->response->setJSON(['message'=>'updated successfully']);
    } 

    public function delete(int $id):ResponseInterface
    {
        $del=$this->costComponentTypeModel->softDelete($id);

        if(!$del){
            return $this->response->setStatusCode(500)
           ->setJSON(['error' => 'Delete failed']);
        }
        return $this->response->setJSON(['message' => 'Deleted successfully']);
    

    }



}
?>